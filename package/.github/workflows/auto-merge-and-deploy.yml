name: Auto-merge PRs & Deploy on main

on:
  # 1) เมิร์จอัตโนมัติเมื่อมี PR ถูกติดป้าย (label) ว่า "automerge"
  pull_request:
    types: [opened, reopened, synchronize, labeled, ready_for_review]
  # 2) ดีพลอยอัตโนมัติเมื่อมีการ push เข้า main
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: prod-deploy
  cancel-in-progress: false

jobs:
  # ---- Auto-merge PR job ----
  automerge:
    if: github.event_name == 'pull_request' && contains(join(fromJson(toJson(github.event.pull_request.labels.*.name)), ' '), 'automerge')
    runs-on: ubuntu-latest
    steps:
      - name: Enable PR auto-merge (squash)
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GH_AUTOMERGE_PAT }} # PAT ที่มีสิทธิ์ repo/pull_requests
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash
        # ต้องเปิด Allow auto-merge และมีกฎ branch protection/เช็คผ่าน ถึงจะทำงาน
        # https://docs.github.com/... (อ้างอิงในข้อความด้านบน)

  # ---- Deploy job (run when main is updated) ----
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for context, not used on server)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy via SSH (git pull & build on server)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # appleboy/ssh-action ดีฟอลต์ port = 22 ถ้าไม่ตั้งค่า สามารถลบบรรทัดนี้ได้
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -eo pipefail

            APP_DIR="/var/www/React-Business"" 
            cd "$APP_DIR"

            # ดึงโค้ดและอัปเดตให้ตรงกับ main (fast-forward; ไม่สร้าง merge commit)
            git fetch origin main
            git checkout -B main origin/main
            git reset --hard origin/main

            # ใช้ nvm ถ้าเครื่องใช้ nvm จัดการ Node (ปลอดภัยกับ case npm ไม่เจอ)
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
              # ตั้งเวอร์ชันที่ต้องการให้ตรงกับโปรเจ็กต์ (แก้ตามจริง หรืออ่านจาก .nvmrc)
              if [ -f ".nvmrc" ]; then nvm install; nvm use; fi
            fi

            # Build (ปรับตามแพ็กเกจที่ใช้: npm/pnpm/yarn)
            npm ci
            npm run build

            # รีสตาร์ตด้วย PM2 (ถ้ามี ecosystem.config.js จะ start ครั้งแรกให้ด้วย)
            if command -v pm2 >/dev/null 2>&1; then
              pm2 restart all || pm2 start ecosystem.config.js
              pm2 save
            else
              echo "PM2 not found. Please install PM2 globally on the server."
              exit 1
            fi
